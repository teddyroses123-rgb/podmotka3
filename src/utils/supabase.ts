import { createClient } from '@supabase/supabase-js';
import { SiteContent } from '../types/content';

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('‚ùå Supabase environment variables not found');
}

export const supabase = createClient(supabaseUrl || '', supabaseAnonKey || '');

export const saveContentToDatabase = async (content: SiteContent): Promise<boolean> => {
  try {
    // Check if Supabase is properly configured
    if (!supabaseUrl || !supabaseAnonKey) {
      console.error('‚ùå Supabase not configured - missing environment variables');
      return false;
    }

    console.log('üîÑ –ü–û–ü–´–¢–ö–ê –°–û–•–†–ê–ù–ï–ù–ò–Ø –í –ë–î (–ü–û–õ–ù–ê–Ø –ü–ï–†–ï–ó–ê–ü–ò–°–¨)...');
    
    // –ö–†–ò–¢–ò–ß–ù–û: –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å –∑–∞–ø–∏—Å–∏ —Å id='main'
    // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å—å, –∑–∞—Ç–µ–º —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
    const { error: deleteError } = await supabase
      .from('site_content')
      .delete()
      .eq('id', 'main');
    
    if (deleteError) {
      console.log('‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä–æ–π –∑–∞–ø–∏—Å–∏:', deleteError.message);
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –∑–∞–ø–∏—Å–∏ –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å
    } else {
      console.log('üóëÔ∏è –°—Ç–∞—Ä–∞—è –∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞');
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
    const { data, error } = await supabase
      .from('site_content')
      .insert({
        id: 'main',
        content: content,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      });
    

    if (error) {
      console.error('‚ùå –û–®–ò–ë–ö–ê –°–û–ó–î–ê–ù–ò–Ø –ù–û–í–û–ô –ó–ê–ü–ò–°–ò –í –ë–î:', error);
      return false;
    }

    console.log('‚úÖ –ö–û–ù–¢–ï–ù–¢ –£–°–ü–ï–®–ù–û –°–û–•–†–ê–ù–ï–ù –í –ë–ê–ó–£ –î–ê–ù–ù–´–• (–ü–û–õ–ù–ê–Ø –ü–ï–†–ï–ó–ê–ü–ò–°–¨)!', data);
    return true;
  } catch (error) {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –°–û–•–†–ê–ù–ï–ù–ò–Ø –í –ë–î:', error);
    return false;
  }
};

export const loadContentFromDatabase = async (): Promise<SiteContent | null> => {
  try {
    // Check if Supabase is properly configured
    if (!supabaseUrl || !supabaseAnonKey) {
      console.error('‚ùå Supabase not configured - missing environment variables');
      return null;
    }

    console.log('üîÑ –ó–ê–ì–†–£–ó–ö–ê –ò–ó –ë–î...');
    
    const { data, error } = await supabase
      .from('site_content')
      .select('content')
      .eq('id', 'main')
      .maybeSingle();

    if (error) {
      console.error('‚ùå –û–®–ò–ë–ö–ê –ó–ê–ì–†–£–ó–ö–ò –ò–ó –ë–î:', error);
      return null;
    }

    if (data && data.content) {
      console.log('‚úÖ –ö–û–ù–¢–ï–ù–¢ –£–°–ü–ï–®–ù–û –ó–ê–ì–†–£–ñ–ï–ù –ò–ó –ë–î');
      return data.content as SiteContent;
    }

    console.log('‚ö†Ô∏è –ù–ï–¢ –î–ê–ù–ù–´–• –í –ë–î');
    return null;
  } catch (error) {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ó–ê–ì–†–£–ó–ö–ò –ò–ó –ë–î:', error);
    return null;
  }
};